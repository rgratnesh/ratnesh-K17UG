#include<stdio.h>
#include<conio.h>
#include<string.h>
int main()
{
int n,r,i,j,c;
int insta1[10],avail[10],p[10],insta2[10],alloc[10][10],max[10][10],need[10][10],temp[10];
printf("\nEnter number of process: ");
scanf("%d",&n);
	printf("\nEnter number of resources : ");
	scanf("%d",&r);
	int k=r;
	printf("\nEnter available resources: ");
	for(i=0;i<r;i++)
	scanf("%d",&avail[i]);
	
	printf("\nEnter instances for resources:\n");
	printf("\nPress 0 for P0(Request 1) or Press 1 for P1(Request 2): ");
	scanf("%d",&c);
	if(c==0)//for Request 1
	{
		for(i=0;i<r;i++)
		{
		    char s=65+i;
			printf("%c\t",s);
			scanf("%d",&insta1[i]);
		}
	}
	else if(c==1)//for Request 2
	{
		for(i=0;i<r;i++)
		{
			char s=65+i;
			printf("%c\t",s);
			scanf("%d",&insta2[i]);
		}
	}
	printf("\nEnter allocation matrix:\n");
	for(i=0;i<n;i++)
	{
		p[i]=0;
		printf("P%d\t",i);
		for(j=0;j<r;j++)
		{
			scanf("%d",&alloc[i][j]);
		}
	}
	printf("\nEnter max matrix:\n");
	for(i=0;i<n;i++)
	{
		printf("P%d\t",i);
		for(j=0;j<r;j++)
		scanf("%d",&max[i][j]);
	}
	if(c==0)
	{
		for(i=0;i<n;i++)
		{
			printf("\nP%d",i);
			for(j=0;j<r;j++)
			{
				need[i][j]=max[i][j]-alloc[i][j];//calculating need matrix 
			
				if(k>0)
  				{
	  				need[i][j] = insta1[j]+need[i][j];//calculating need matrix for P0 by adding extra instances requested by the process 
					k--;
  				}	
			printf("\t%d",need[i][j]);
  			}
		}
		printf("\n");
	}
	if(c==1)
	{
		for(i=0;i<n;i++)
		{
			printf("\nP",i);
			for(j=0;j<r;j++)
			{
				need[i][j]=max[i][j]-alloc[i][j];//calculating need matrix 
				if(i==1)
	  			need[i][j] = insta2[j]+need[i][j];//calculating need matrix for P1 by adding extra instances requested by the process
			
			printf("%d\t",need[i][j]);
  			}
		}
		printf("\n");
	}
int q=0,count=0,ct,m=0;	
while(q<15)
{
	for(i=0;i<n;i++)
 	{  
 		ct=0;
 		for(j=0;j<r;j++)
 		{
  			if(p[i]==1) 
			break;
  			if(need[i][j]<=avail[j])
  				ct++;
  			if(ct==r)
  			{
  				for(j=0;j<r;j++)
 				{
  					avail[j]=avail[j]+alloc[i][j];
  				}
  				temp[m]=i;
  				m++;
				p[i]=1;     
				count++;
  			}
 		}
 	}	 
 	q++;
}
if(count==n)
{
	printf("\nSystem is in Safe state:\n");
	for(i=0;i<m;i++)
	printf("P%d\t",temp[i]);
}
else
{
	printf("\n System is in UnSafe state:\n");
	for(i=0;i<m;i++)
	printf("P%d\t",temp[i]);
}
}
